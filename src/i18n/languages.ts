export interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  path: string;
}

export const languages: Record<string, Language> = {
  en: {
    code: 'en',
    name: 'English',
    nativeName: 'English',
    flag: 'üá∫üá∏',
    path: '/en'
  },
  ru: {
    code: 'ru',
    name: 'Russian',
    nativeName: '–†—É—Å—Å–∫–∏–π',
    flag: 'üá∑üá∫',
    path: '/ru'
  },
  de: {
    code: 'de',
    name: 'German',
    nativeName: 'Deutsch',
    flag: 'üá©üá™',
    path: '/de'
  },
  fr: {
    code: 'fr',
    name: 'French',
    nativeName: 'Fran√ßais',
    flag: 'üá´üá∑',
    path: '/fr'
  }
};

export const defaultLanguage = 'en';

export const supportedLanguages = Object.keys(languages);

// –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ –∫–æ–¥—É
export function getLanguage(code: string): Language | undefined {
  return languages[code];
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —è–∑—ã–∫–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
export function getOtherLanguages(currentLang: string): Language[] {
  return Object.values(languages).filter(lang => lang.code !== currentLang);
}

// –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —è–∑—ã–∫–∞
export function getLanguageUrl(targetLang: string, currentPath?: string): string {
  const targetLanguage = getLanguage(targetLang);
  if (!targetLanguage) return '/';
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å, –∑–∞–º–µ–Ω—è–µ–º —è–∑—ã–∫ –≤ –Ω—ë–º
  if (currentPath && currentPath.startsWith('/')) {
    const pathParts = currentPath.split('/');
    if (pathParts[1] && supportedLanguages.includes(pathParts[1])) {
      pathParts[1] = targetLang;
      return pathParts.join('/');
    }
  }
  
  return targetLanguage.path;
}
